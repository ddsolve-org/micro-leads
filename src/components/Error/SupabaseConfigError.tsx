// Configura√ß√£o robusta do Supabase com fallbacks
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;

console.log('üîß Configura√ß√£o do Supabase:', {
  url: supabaseUrl ? 'Configurado' : 'N√ÉO CONFIGURADO',
  key: supabaseAnonKey ? 'Configurado' : 'N√ÉO CONFIGURADO',
  env: import.meta.env.MODE || 'unknown'
});

if (!supabaseUrl) {
  console.error('‚ùå VITE_SUPABASE_URL n√£o est√° definido');
}

if (!supabaseAnonKey) {
  console.error('‚ùå VITE_SUPABASE_ANON_KEY n√£o est√° definido');
}

// Criar cliente apenas se as vari√°veis estiverem configuradas
export const supabase = supabaseUrl && supabaseAnonKey 
  ? createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
      }
    })
  : null;

// Fun√ß√£o para verificar se o Supabase est√° configurado
export function isSupabaseConfigured(): boolean {
  return Boolean(supabaseUrl && supabaseAnonKey && supabase);
}

// Fun√ß√£o para mostrar erro de configura√ß√£o
export function getSupabaseConfigError(): string | null {
  if (!supabaseUrl) return 'URL do Supabase n√£o configurada';
  if (!supabaseAnonKey) return 'Chave an√¥nima do Supabase n√£o configurada';
  return null;
}