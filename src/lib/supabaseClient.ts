import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o robusta do Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log('üîß Configura√ß√£o do Supabase:', {
  url: supabaseUrl ? 'Configurado' : 'N√ÉO CONFIGURADO',
  key: supabaseAnonKey ? 'Configurado' : 'N√ÉO CONFIGURADO',
  env: import.meta.env.MODE || 'unknown'
});

// Verificar se as vari√°veis est√£o definidas
if (!supabaseUrl) {
  console.error('‚ùå VITE_SUPABASE_URL n√£o est√° definido');
  throw new Error('VITE_SUPABASE_URL √© obrigat√≥rio');
}

if (!supabaseAnonKey) {
  console.error('‚ùå VITE_SUPABASE_ANON_KEY n√£o est√° definido');
  throw new Error('VITE_SUPABASE_ANON_KEY √© obrigat√≥rio');
}

// Criar cliente do Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Fun√ß√£o para verificar se o Supabase est√° configurado
export function isSupabaseConfigured(): boolean {
  return Boolean(supabaseUrl && supabaseAnonKey);
}

// Fun√ß√£o para mostrar erro de configura√ß√£o
export function getSupabaseConfigError(): string | null {
  if (!supabaseUrl) return 'URL do Supabase n√£o configurada';
  if (!supabaseAnonKey) return 'Chave an√¥nima do Supabase n√£o configurada';
  return null;
}

// Teste de conex√£o
export async function testConnection() {
  try {
    const { data, error } = await supabase
      .from('leads-duque')
      .select('count', { count: 'exact' })
      .limit(0);

    if (error) {
      console.error('‚ùå Erro na conex√£o com Supabase:', error);
      return false;
    }

    console.log('‚úÖ Conex√£o com Supabase estabelecida');
    return true;
  } catch (err) {
    console.error('‚ùå Erro inesperado na conex√£o:', err);
    return false;
  }
}