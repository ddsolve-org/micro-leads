import { createClient, SupabaseClient } from '@supabase/supabase-js';

// Configura√ß√£o robusta do Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log('üîß Configura√ß√£o do Supabase:', {
  url: supabaseUrl ? 'Configurado' : 'N√ÉO CONFIGURADO',
  key: supabaseAnonKey ? 'Configurado' : 'N√ÉO CONFIGURADO',
  env: import.meta.env.MODE || 'unknown',
  urlLength: supabaseUrl?.length || 0,
  keyLength: supabaseAnonKey?.length || 0
});

// Fun√ß√£o para criar cliente com valida√ß√£o
function createSupabaseClient(): SupabaseClient | null {
  try {
    // Verifica√ß√£o detalhada das vari√°veis
    if (!supabaseUrl || typeof supabaseUrl !== 'string' || supabaseUrl.trim() === '') {
      console.error('‚ùå VITE_SUPABASE_URL inv√°lido:', supabaseUrl);
      return null;
    }

    if (!supabaseAnonKey || typeof supabaseAnonKey !== 'string' || supabaseAnonKey.trim() === '') {
      console.error('‚ùå VITE_SUPABASE_ANON_KEY inv√°lido:', supabaseAnonKey);
      return null;
    }

    // Validar formato da URL
    if (!supabaseUrl.startsWith('https://') || !supabaseUrl.includes('.supabase.co')) {
      console.error('‚ùå URL do Supabase com formato inv√°lido:', supabaseUrl);
      return null;
    }

    console.log('‚úÖ Criando cliente Supabase...');
    
    const client = createClient(supabaseUrl.trim(), supabaseAnonKey.trim(), {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: false, // Importante para produ√ß√£o
      },
      global: {
        headers: {
          'X-Client-Info': 'micro-leads-v1.0'
        }
      }
    });

    console.log('‚úÖ Cliente Supabase criado com sucesso');
    return client;

  } catch (error) {
    console.error('‚ùå Erro ao criar cliente Supabase:', error);
    return null;
  }
}

// Criar cliente do Supabase
export const supabase = createSupabaseClient();

// Fun√ß√£o para verificar se o Supabase est√° configurado
export function isSupabaseConfigured(): boolean {
  const hasValidUrl = Boolean(supabaseUrl && typeof supabaseUrl === 'string' && supabaseUrl.trim() !== '');
  const hasValidKey = Boolean(supabaseAnonKey && typeof supabaseAnonKey === 'string' && supabaseAnonKey.trim() !== '');
  const hasClient = Boolean(supabase);
  
  console.log('üîç Verifica√ß√£o de configura√ß√£o:', {
    hasValidUrl,
    hasValidKey,
    hasClient,
    urlValid: hasValidUrl ? 'OK' : 'INVALID',
    keyValid: hasValidKey ? 'OK' : 'INVALID'
  });
  
  return hasValidUrl && hasValidKey && hasClient;
}

// Fun√ß√£o para mostrar erro de configura√ß√£o
export function getSupabaseConfigError(): string | null {
  if (!supabaseUrl || typeof supabaseUrl !== 'string' || supabaseUrl.trim() === '') {
    return 'URL do Supabase n√£o configurada ou inv√°lida';
  }
  if (!supabaseAnonKey || typeof supabaseAnonKey !== 'string' || supabaseAnonKey.trim() === '') {
    return 'Chave an√¥nima do Supabase n√£o configurada ou inv√°lida';
  }
  if (!supabase) {
    return 'Cliente Supabase n√£o foi criado corretamente';
  }
  return null;
}

// Teste de conex√£o seguro
export async function testConnection(): Promise<boolean> {
  try {
    if (!supabase) {
      console.error('‚ùå Cliente Supabase n√£o dispon√≠vel');
      return false;
    }

    console.log('üåê Testando conex√£o com Supabase...');
    
    // Teste simples de ping
    const { data, error } = await supabase
      .from('leads-duque')
      .select('count', { count: 'exact', head: true })
      .limit(0);

    if (error) {
      console.error('‚ùå Erro na conex√£o com Supabase:', error.message);
      
      // Se for erro de permiss√£o, ainda considera conectado
      if (error.message.includes('permission') || error.message.includes('policies')) {
        console.log('‚ö†Ô∏è Conectado mas sem permiss√£o na tabela');
        return true;
      }
      
      return false;
    }

    console.log('‚úÖ Conex√£o com Supabase estabelecida:', data);
    return true;
    
  } catch (err) {
    console.error('‚ùå Erro inesperado na conex√£o:', err);
    return false;
  }
}